#!/bin/bash -ex
exec > >(tee /var/log/user-data.log | logger -t user-data -s 2>/dev/console) 2>&1

echo "Starting user-data script..."

echo "Determining package manager..."

# Work with both dnf and apt-get.
if command -v apt-get >/dev/null 2>&1; then
  PKG_MANAGER=apt-get
  INSTALL_CMD="apt-get install -y"
else
  PKG_MANAGER=dnf
  INSTALL_CMD="dnf install -y"
fi

echo "Detected the following package manager: $PKG_MANAGER."

echo "Enabling IP forwarding..."
echo 'net.ipv4.ip_forward = 1' >> /etc/sysctl.conf
echo 'net.ipv6.conf.all.forwarding = 1' >> /etc/sysctl.conf
sysctl -p /etc/sysctl.conf

# In systemd, Administrator drop-ins should reside in /etc/systemd/, ensuring they
# are preserved across updates and have higher precedence than vendor defaults.
#
# We name our file 99-custom.conf so it loads last among any .conf files.
# That way, it overrides any settings that come earlier.

# Create the journald configs directory if it doesn't already exist
mkdir -p /etc/systemd/journald.conf.d

cat <<EOF > /etc/systemd/journald.conf.d/99-custom.conf
[Journal]
SystemMaxUse=${journald_system_max_use}
MaxRetentionSec=${journald_max_retention_sec}
EOF

# Restart journald so it picks up the new configuration
systemctl restart systemd-journald

# Function to retry a command up to a maximum number of attempts
retry_command() {
  local cmd="$1"
  local max_attempts="$2"
  local attempt=1
  local exit_code=0

  while [ $attempt -le $max_attempts ]; do
    echo "Attempt $attempt of $max_attempts: $cmd"
    eval "$cmd"
    exit_code=$?
    if [ $exit_code -eq 0 ]; then
      echo "Command succeeded: $cmd"
      return 0
    else
      echo "Command failed with exit code $exit_code: $cmd"
      attempt=$((attempt + 1))
      if [ $attempt -le $max_attempts ]; then
        echo "Retrying in 2 seconds..."
        sleep 2
      fi
    fi
  done

  echo "Command failed after $max_attempts attempts: $cmd"
  return $exit_code
}

# Function to install necessary packages per distro.
install_packages() {
  case "$PKG_MANAGER" in
    apt-get)
      # Update package cache.
      echo "Updating package cache..."
      retry_command "$PKG_MANAGER update" 5

      # Install utilities.
      echo "Installing utilities..."
      retry_command "$INSTALL_CMD curl wget" 5

      # Install CloudWatch Agent.
      echo "Installing CloudWatch Agent..."
      distro=$(grep '^ID=' /etc/os-release | cut -d'=' -f2)
      arch=$(uname -m)
      case "$arch" in
        x86_64)
          arch=amd64
          ;;
        *)
          arch=arm64
          ;;
      esac
      retry_command "wget https://amazoncloudwatch-agent.s3.amazonaws.com/$distro/$arch/latest/amazon-cloudwatch-agent.deb" 5
      retry_command "dpkg -i -E ./amazon-cloudwatch-agent.deb" 5
      ;;
    *)
      # Install utilities.
      echo "Installing utilities..."
      retry_command "$INSTALL_CMD dnf-utils" 5

      # Install CloudWatch Agent.
      echo "Installing CloudWatch Agent..."
      retry_command "$INSTALL_CMD amazon-cloudwatch-agent" 5
      ;;
  esac
}

# Install necessary packages.
echo "Installing necessary packages..."
install_packages

# Start the CloudWatch Agent.
amazon-cloudwatch-agent-ctl -a start -m ec2

# Install Tailscale
echo "Installing Tailscale..."
retry_command "curl -fsSL https://tailscale.com/install.sh | sh" 5

%{ if tailscaled_extra_flags_enabled == true }
echo "Exporting FLAGS to /etc/default/tailscaled..."
sed -i "s|^FLAGS=.*|FLAGS=\"${tailscaled_extra_flags}\"|" /etc/default/tailscaled
%{ endif }

echo "Waiting for tailscaled to initialize..."
sleep 5

# Start tailscale
# We pass --advertise-tags below even though the authkey being created with those tags should result
# in the same effect. This is to be more explicit because tailscale tags are a complicated topic.
tailscale up \
  %{ if ssh_enabled == true }--ssh%{ endif } \
  %{ if exit_node_enabled == true }--advertise-exit-node%{ endif } \
  %{ if tailscale_up_extra_flags_enabled == true }${tailscale_up_extra_flags}%{ endif } \
  --advertise-routes=${routes} \
  --advertise-tags=${tags} \
  --hostname=${hostname} \
  --authkey=${authkey}

echo "Tailscale setup completed."
